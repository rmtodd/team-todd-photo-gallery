# Task ID: 11
# Title: Main Layout and Navigation Implementation
# Status: pending
# Dependencies: 1, 3
# Priority: medium
# Description: Create the main application layout with responsive design and navigation elements.
# Details:
1. Create layout component in app/layout.tsx:
```typescript
import React from 'react';
import { Inter } from 'next/font/google';
import './globals.css';

const inter = Inter({ subsets: ['latin'] });

export const metadata = {
  title: 'Team Todd Photo Gallery',
  description: 'A private family photo gallery',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <header className="bg-white shadow-sm py-4">
          <div className="container mx-auto px-4 flex justify-between items-center">
            <h1 className="text-xl font-bold">Team Todd Photo Gallery</h1>
            <nav>
              <ul className="flex space-x-4">
                <li>
                  <a href="/" className="text-blue-500 hover:text-blue-700">
                    Gallery
                  </a>
                </li>
                <li>
                  <a href="/upload" className="text-blue-500 hover:text-blue-700">
                    Upload
                  </a>
                </li>
              </ul>
            </nav>
          </div>
        </header>
        <main className="container mx-auto px-4 py-8">{children}</main>
        <footer className="bg-gray-100 py-4 mt-8">
          <div className="container mx-auto px-4 text-center text-gray-500">
            &copy; {new Date().getFullYear()} Team Todd Photo Gallery
          </div>
        </footer>
      </body>
    </html>
  );
}
```
2. Create home page in app/page.tsx:
```typescript
import React from 'react';
import PhotoGallery from '@/components/PhotoGallery';
import UploadWidget from '@/components/UploadWidget';

export default function Home() {
  return (
    <div>
      <PhotoGallery />
      <UploadWidget
        onSuccess={(result) => {
          console.log('Upload success:', result);
          // Refresh gallery
        }}
        onFailure={(error) => {
          console.error('Upload error:', error);
        }}
      />
    </div>
  );
}
```
3. Implement responsive design with Tailwind CSS
4. Add mobile navigation menu
5. Implement conditional rendering based on authentication status

# Test Strategy:
1. Test responsive layout on different screen sizes
2. Verify navigation works correctly
3. Test conditional rendering based on authentication
4. Verify mobile navigation menu works correctly
5. Test layout with different content lengths
