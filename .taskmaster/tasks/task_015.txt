# Task ID: 15
# Title: Testing and Deployment
# Status: pending
# Dependencies: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14
# Priority: high
# Description: Implement comprehensive testing strategy and configure deployment pipeline.
# Details:
1. Set up Jest and React Testing Library:
```typescript
// In jest.config.js
module.exports = {
  testEnvironment: 'jsdom',
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  testPathIgnorePatterns: ['<rootDir>/.next/', '<rootDir>/node_modules/'],
  moduleNameMapper: {
    '^@/components/(.*)$': '<rootDir>/components/$1',
    '^@/lib/(.*)$': '<rootDir>/lib/$1',
  },
};

// In jest.setup.js
import '@testing-library/jest-dom';
```
2. Create component tests:
```typescript
// Example test for PhotoGallery.test.tsx
import { render, screen } from '@testing-library/react';
import PhotoGallery from '@/components/PhotoGallery';

// Mock SWR
jest.mock('swr', () => ({
  __esModule: true,
  default: () => ({
    data: {
      photos: [
        {
          public_id: 'test-1',
          secure_url: 'https://example.com/test-1.jpg',
          width: 800,
          height: 600,
        },
      ],
    },
    error: null,
    isLoading: false,
  }),
}));

describe('PhotoGallery', () => {
  it('renders the gallery', () => {
    render(<PhotoGallery />);
    expect(screen.getByRole('img')).toBeInTheDocument();
  });
});
```
3. Set up Cypress for integration testing:
```bash
npm install --save-dev cypress
```
4. Create Cypress tests:
```javascript
// In cypress/integration/gallery.spec.js
describe('Photo Gallery', () => {
  beforeEach(() => {
    cy.visit('/');
  });
  
  it('displays the gallery', () => {
    cy.get('[data-testid="photo-gallery"]').should('be.visible');
  });
  
  it('opens photo modal when clicking a photo', () => {
    cy.get('[data-testid="photo-item"]').first().click();
    cy.get('[data-testid="photo-modal"]').should('be.visible');
  });
});
```
5. Set up Lighthouse CI:
```bash
npm install --save-dev @lhci/cli
```
6. Configure GitHub Actions for CI/CD in .github/workflows/ci.yml:
```yaml
name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      - name: Run linting
        run: npm run lint
      - name: Run tests
        run: npm test
      - name: Run Cypress tests
        uses: cypress-io/github-action@v2
        with:
          build: npm run build
          start: npm start
      - name: Run Lighthouse CI
        run: npx lhci autorun

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
```
7. Configure Vercel for deployment
8. Set up environment variables in Vercel dashboard

# Test Strategy:
1. Run unit tests with Jest
2. Run integration tests with Cypress
3. Run Lighthouse CI to measure performance
4. Test deployment process to Vercel
5. Verify environment variables are correctly set in production
6. Test the application in production environment
