# Task ID: 13
# Title: Error Handling and Logging
# Status: pending
# Dependencies: 4, 6, 12
# Priority: medium
# Description: Implement comprehensive error handling, logging, and monitoring throughout the application.
# Details:
1. Create error boundary component in components/ErrorBoundary.tsx:
```typescript
import React, { Component, ErrorInfo, ReactNode } from 'react';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {
    // Log error to monitoring service
    console.error('Error caught by boundary:', error, errorInfo);
  }

  render(): ReactNode {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return this.props.fallback;
      }
      
      return (
        <div className="p-4 bg-red-50 border border-red-200 rounded-md">
          <h2 className="text-lg font-semibold text-red-800">Something went wrong</h2>
          <p className="mt-2 text-red-700">
            {this.state.error?.message || 'An unexpected error occurred'}
          </p>
          <button
            className="mt-4 px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
            onClick={() => window.location.reload()}
          >
            Reload page
          </button>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
```
2. Create custom error page in app/error.tsx:
```typescript
'use client';

import React from 'react';

export default function Error({
  error,
  reset,
}: {
  error: Error;
  reset: () => void;
}) {
  return (
    <div className="flex flex-col items-center justify-center min-h-[50vh] p-4">
      <h2 className="text-2xl font-bold text-red-600 mb-4">Something went wrong!</h2>
      <p className="text-gray-600 mb-6">{error.message || 'An unexpected error occurred'}</p>
      <button
        onClick={reset}
        className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
      >
        Try again
      </button>
    </div>
  );
}
```
3. Create not-found page in app/not-found.tsx
4. Implement global error handler:
```typescript
// In lib/errorHandler.ts
export function logError(error: Error, context?: any) {
  console.error('Application error:', error, context);
  
  // Send to monitoring service (future implementation)
  // Example: sendToSentry(error, context);
}

export function handleApiError(error: any) {
  const errorMessage = error.response?.data?.message || error.message || 'An unexpected error occurred';
  
  logError(error);
  
  return {
    error: errorMessage,
    status: error.response?.status || 500,
  };
}
```
5. Add try/catch blocks to all API routes and data fetching functions
6. Implement toast notifications for user feedback

# Test Strategy:
1. Test error boundary by intentionally causing errors
2. Verify custom error pages display correctly
3. Test error handling in API routes
4. Verify error logging works correctly
5. Test not-found page
6. Verify toast notifications appear for errors
